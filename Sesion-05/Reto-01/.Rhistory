iris
head(iris, 5)
str(iris)
Respuestas = sample(c("Si", "No"), size = 20, replace = TRUE)
Respuestas
table(Respuestas)
Sexo = sample(c("Hombre", "Mujer"), size = 20, replace = TRUE)
Sexo
table(Respuestas, Sexo)
install.packages("shiny")
install.packages(c("codetools", "foreign", "KernSmooth", "Matrix", "nlme"))
qnorm(0.95, 0, 1)
qnorm(0.95, 0, 1, lower.tail = FALSE)
qnorm(0.025, 0, 1, lower.tail = FALSE)
100 - 99.7
/2
(100 - 99.7) / 2
qnorm(0.0015, 0, 1, lower.tail = FALSE)
p(0.05, 8)
pt(0.05, 8)
pt(0.05, 8, lower.tail = F)
cat <- c("auto", "home", "student")
con <- c(0, 12000, 40000, 20000)
edad <- c(1, 2, 3, 4, 5, 7, 9, 11, 13)
altura <- c(76.11, 86.45, 95.27, 109.18, 122.03, 133.73, 143.73, 156.41)
edad
altura
datos1 <- data.frame(edad, altura)
length(edad)
length(altura)
edad <- c(1, 2, 3, 5, 7, 9, 11, 13)
datos1 <- data.frame(edad, altura)
datos1
plot(x, y)
plot(datos1)
lm(altura~edad, data = datos1)
abline(lm(altura~edad, data = datos1))
summary(lm(altura~edad, data = datos1))
summary(lm(altura~edad, data = datos1))$r.squaread
summary(lm(altura~edad, data = datos1))$r.squared
datos1$edad
library(readr)
df_pearson <- read_table2("http://aprender.uib.es/Rdir/pearson.txt")
View(df_pearson)
str(df_pearson)
head(df_pearson)
lm(Hijos~Padres, data = df_pearson)
summary(lm(Hijos~Padres, data = df_pearson))$r.squared
plot(df_pearson)
abline(lm(Hijos~Padres, data = df_pearson))
abline(lm(Hijos~Padres, data = df_pearson), col = "red")
replicate(10, roll())
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
roll <- function() {}
roll <- function() {
dice <- 1:6
dice_data <- sample(dice, size = 2, replace = T)
sum(dice_data)
}
roll
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
rep(roll(), 2)
rep(roll(), 2)
rep(roll(), 2)
replicate(10, roll())
rolls <- replicate(10, roll())
qplot(rolls, bandwidth = 1)
qplot(rolls)
qplot(rolls, bandwidth.kernel(1))
qplot(rolls)
rolls <- replicate(10000, roll())
qplot(rolls)
knitr::opts_chunk$set(echo = TRUE)
netflix <- read.csv('https://raw.githubusercontent.com/ecoronadoj/Sesion_1/main/Data/netflix_titles.csv')
netflix
summary(netflix)
netflix <- read.csv('https://raw.githubusercontent.com/ecoronadoj/Sesion_1/main/Data/netflix_titles.csv')
summary(netflix)$Length
summary(netflix)$Length
summary(netflix)$Length
summary(netflix)$Length
summary(netflix)$Class
length(netflix)
dim(netflix)
class(netflix)
print('Dimensión:' , dim(netflix))
print(c('Dimensión:' , dim(netflix)))
dim(netflix)
class(netflix)
print(class(netflix))
netflix <- read.csv('https://raw.githubusercontent.com/ecoronadoj/Sesion_1/main/Data/netflix_titles.csv')
print(dim(netflix))
print(class(netflix))
netflix <- read.csv('https://raw.githubusercontent.com/ecoronadoj/Sesion_1/main/Data/netflix_titles.csv')
dim(netflix)
class(netflix)
netflix <- read.csv('https://raw.githubusercontent.com/ecoronadoj/Sesion_1/main/Data/netflix_titles.csv')
paste('Dimensión: ', dim(netflix))
paste('Tipo:', typeof(netflix))
columns(netflix)
summary(netflix)$columns
names(netflix)
net.2015 <- netflix[netflix$release_year > 2015]
netflix$release_year
netflix$release_year > 2015
netflix[netflix$release_year > 2015]
netflix[title, netflix$release_year > 2015]
netflix$title[netflix$release_year > 2015]
netflix$title[netflix$release_year > 2015, ]
netflix[netflix$release_year > 2015, ]
net.2015 <- netflix[netflix$release_year > 2015, ]
net.2015 <- netflix[netflix$release_year > 2015, ]
head(net.2015)
net.2015 <- netflix[netflix$release_year > 2015, ]$title
head(net.2015)
net.2015 <- netflix[netflix$release_year > 2015, ]
head(net.2015)
net.2015 <- netflix[netflix$release_year > 2015, ]
head(net.2015, 20)
netflix <- read.csv('https://raw.githubusercontent.com/ecoronadoj/Sesion_1/main/Data/netflix_titles.csv')
netflix[netflix$release_year > 2015, "title"]
netflix[netflix$release_year > 2015]$title
netflix$title[netflix$release_year > 2015]
net.2015 <- netflix$title[netflix$release_year > 2015]
install.packages("dplyr")
install.packages("ggplot2") #siempre lleva  comillas
install.packages(c("Matrix", "rlang", "xfun"))
w <- rnorm(20)
w[1:10] = w[1:10] ** 2
w
w[1:10] = w[1:10] ** 2
w
x = runif(1, 0, 10)
y = x > 5
y
x
runif(44, 0, 10)
for (i in 1:15) {
df.al = rbind(df.al, ran[i] ^ 3 + 12)
}
ran <- runif(44, 0, 10)
df.al <- data.frame('ran' = integer(), 'res' = numeric())
for (i in 1:15) {
df.al = rbind(df.al, ran[i] ^ 3 + 12)
}
df.al
ran <- runif(44, 0, 10)
df.al <- data.frame('ran' = integer(), 'res' = numeric())
for (i in 1:15) {
df.al = rbind(df.al, ran[i] ^ 3 + 12)
}
df.al
ran <- runif(44, 0, 10)
df.al <- data.frame('ran' = integer(), 'res' = numeric())
for (i in 1:15) {
df.al = rbind(df.al, ran[i] ^ 3 + 12)
}
names(df.al)[1] = 'ran'
names(df.al)[2] = 'res'
ran <- runif(44, 0, 10)
df.al <- data.frame('ran' = integer(), 'res' = numeric())
for (i in 1:15) {
df.al = rbind(df.al, c(ran[i], ran[i] ^ 3 + 12))
}
names(df.al)[1] = 'ran'
names(df.al)[2] = 'res'
df.al
ran <- runif(44, 0, 10)
df.al <- data.frame(matrix(ncol = 2, nrow = 0), c('ran', 'res'))
for (i in 1:15) {
df.al = rbind(df.al, c(ran[i], ran[i] ^ 3 + 12))
}
df.al
ran <- runif(44, 0, 10)
df.al <- data.frame(matrix(ncol = 2, nrow = 0), c('ran', 'res'))
for (i in 1:15) {
df.al = rbind(df.al, c(ran[i], ran[i] ^ 3 + 12))
}
ran <- runif(44, 0, 10)
df.al <- data.frame(matrix(ncol = 2, nrow = 0), c('ran', 'res'))
ran <- runif(44, 0, 10)
df.al <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df.al) <- c('ran', 'res')
for (i in 1:15) {
df.al = rbind(df.al, c(ran[i], ran[i] ^ 3 + 12))
}
df.al
ran <- runif(44, 0, 10)
df.al <- data.frame(matrix(ncol = 2, nrow = 0))
for (i in 1:15) {
df.al = rbind(df.al, c(ran[i], ran[i] ^ 3 + 12))
}
colnames(df.al) <- c('ran', 'res')
df.al
df.primera_division <- read.csv('https://www.football-data.co.uk/mmz4281/1920/SP1.csv')
names(df.primera_division)
df.primera_division <- df.primera_division[, "FTHG", "FTAG"]
df.primera_division <- df.primera_division[, df.primera_division("FTHG", "FTAG")]
df.primera_division <- df.primera_division[, c("FTHG", "FTAG")]
df.primera_division
table(df.primera_division)
len(df.primera_division)
length(df.primera_division)
sum(df.primera_division)
df.primera_division
prop.table(table(df.primera_division))
table(df.primera_division)
sum(prop.table(table(df.primera_division)))
prop.table(table(df.primera_division), margin = 1)
sum(df.primera_division[df.primera_division$FTHG == 0])
sum(df.primera_division[df.primera_division$FTHG == 0, ])
df.primera_division[df.primera_division$FTHG == 0, ]
df.primera_division$FTHG[df.primera_division$FTHG == 0, ]
df.primera_division[df.primera_division$FTHG == 0, ]$FTHG
length(df.primera_division[df.primera_division$FTHG == 0, ]$FTHG)
table(df.primera_division$FTAG)
table(df.primera_division$FTHG)
table(df.primera_division$FTAG)
sum(prop.table(table(df.primera_division$FTHG)))
sum(prop.table(table(df.primera_division$FTHG)))
sum(prop.table(table(df.primera_division$FTHG), margin = 1))
sum(prop.table(table(df.primera_division$FTHG), margin = 2))
prop.table(table(df.primera_division$FTHG))
sum(prop.table(table(df.primera_division$FTHG)))
prop.table(table(df.primera_division$FTAG))
prop.table(table(df.primera_division$FTHG))
prop.table(table(df.primera_division$FTAG))
table(df.primera_division)
prop.table(table(df.primera_division))
table(df.primera_division$FTHG) / nrow(df.primera_division)
# table(df.primera_division$FTHG) / nrow(df.primera_division)
prop.table(table(df.primera_division$FTHG))
hist(df.altura)
df.altura <- read.csv("https://github.com/beduExpert/Programacion-con-R-Santander/blob/master/Sesion-03/Reto-01/BD_Altura_Alunos.csv")
hist(df.altura)
df.altura
head(df.altura)
df.altura <- read.csv("https://github.com/beduExpert/Programacion-con-R-Santander/blob/master/Sesion-03/Reto-01/BD_Altura_Alunos.csv", sep = ';')
head(df.altura)
df.altura <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-03/Reto-01/BD_Altura_Alunos.csv", sep = ';')
head(df.altura)
hist(df.altura)
hist(df.altura$Altura)
df.altura <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-03/Reto-01/BD_Altura_Alunos.csv", sep = ';')
hist(df.altura$Altura, breaks = 40)
hist(df.altura$Altura, breaks = 10)
hist(df.altura$Altura, breaks = 20)
hist(df.altura$Altura, breaks = 25)
hist(df.altura$Altura, breaks = 25)
hist(df.altura$Altura, breaks = 15)
hist(df.altura$Altura, breaks = 30)
hist(df.altura$Altura, breaks = 20)
hist(df.altura$Altura, breaks = 18)
hist(df.altura$Altura, breaks = seq(120, 180, 5))
hist(df.altura$Altura, breaks = seq(120, 180, 5))
hist(df.altura$Altura, breaks = seq(120, 200, 5))
hist(df.altura$Altura, breaks = seq(120, 200, 5))
hist(df.altura$Altura,
breaks = seq(120, 200, 5),
main = " Histograma de alturas",
ylab = "Frecuencia",
xlab = "Altura",
col = "blue")
df.altura %>%
ggplot() +
geom_histogram(binwidth = 4, col="black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Alturas") +
theme_light()
library(ggplot2)
df.altura %>%
ggplot() +
geom_histogram(binwidth = 4, col="black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Alturas") +
theme_light()
df.altura %>%
ggplot() +
geom_histogram(binwidth = 4, col="black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Alturas") +
theme_light()
df.altura$Altura %>%
ggplot() +
geom_histogram(binwidth = 4, col="black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Alturas") +
theme_light()
library(dplyr)
df.altura$Altura %>%
ggplot() +
geom_histogram(binwidth = 4, col="black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Alturas") +
theme_light()
df.altura %>%
ggplot() +
geom_histogram(binwidth = 4, col="black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Alturas") +
theme_light()
ggplot(df.altura, aes(Altura))+
geom_histogram(binwidth = 4, col="black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Alturas") +
theme_light()
df.players <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-03/Reto-02/players_stats.csv")
head(df.players)
nba <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-03/Reto-02/players_stats.csv")
nba <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-03/Reto-02/players_stats.csv")
# 1. Histograma de los minuntos totales de losjugadores y la media
mnba <-mean(nba$MIN)
ggplot(nba, aes(MIN))+
geom_histogram(binwidth = 30, col="black", fill = "blue") +
ggtitle("Histograma de Minutos por jugador", paste("Media=",mnba)) +
ylab("Frecuencia") +
xlab("Minutos") +
geom_vline(xintercept =  mnba, col = "red", lwd = 1.5, lty =2)+
theme_light()
ggplot(nba, aes(MIN))+
geom_histogram(binwidth = 30, col="black", fill = "cyan") +
ggtitle("Histograma de Minutos por jugador", paste("Media=",mnba)) +
ylab("Frecuencia") +
xlab("Minutos") +
geom_vline(xintercept =  mnba, col = "red", lwd = 1.5, lty =2)+
theme_light()
ggplot(nba, aes(MIN))+
geom_histogram(binwidth = 30, col="black", fill = "purple") +
ggtitle("Histograma de Minutos por jugador", paste("Media=",mnba)) +
ylab("Frecuencia") +
xlab("Minutos") +
geom_vline(xintercept =  mnba, col = "red", lwd = 1.5, lty =2)+
theme_light()
ggplot(nba, aes(MIN))+
geom_histogram(binwidth = 30, col="black", fill = "blue") +
ggtitle("Histograma de Minutos por jugador", paste("Media=",mnba)) +
ylab("Frecuencia") +
xlab("Minutos") +
geom_vline(xintercept =  mnba, col = "red", lwd = 1.5, lty =2)+
theme_light()
ma.nba <-mean(na.omit(nba$Age))
ggplot(nba, aes(Age))+
geom_histogram(binwidth = 2, col="black", fill = "blue") +
ggtitle("Histograma de Edad", paste("Media=",ma.nba)) +
ylab("Frecuencia") +
xlab("Edad") +
geom_vline(xintercept =  ma.nba, col = "red", lwd = 1.5, lty =2)+
theme_light()
p <- nba %>% ggplot(aes(Weight, Height)) +
geom_point()
p
(lmnba <- coef(lm(Height ~ Weight, data = nba)))
#> (Intercept)          MIN
#>   -136.129102   1.193261
p + geom_abline(intercept = lmnba[1], slope = lmnba[2], col = "red", lwd = 1.5, lty = 2)
#> (Intercept)          MIN
#>   -136.129102   1.193261
p + geom_abline(intercept = lmnba[1], slope = lmnba[2], col = "red", lwd = 1.5, lty = 2)
paste("El jugador más alto es:", nba$Name[alto],"con una altura de:" , round(nba$Height[alto]/100,2), "m")
#5. Jugador más bajo
(bajito <- which.min(nba$Height))
paste("El jugador más bajito es:", nba$Name[bajito],"con una altura de:" ,round(nba$Height[bajito]/100,2), "m")
#6. La altura promedio, (Hint: hay que utilizar na.omit en caso de presencia de NA´s)
(altura.m <- mean(na.omit(nba$Height)))
paste("La altura promedio es:", round(altura.m/100,2),"m")
# 7. Scatterplot de Asistencias totales vs Puntos, con un face wrap por posición.
nba %>% ggplot( aes(AST.TOV, PTS )) +
geom_point() +
facet_wrap("Pos")
library(forecast)
install.packages("forecast")
# 2. La probabilidad de observar 10 o más exitos
# P (X >= 10)
(pbinom(q = 10, size = 35, prob = 0.51, lower.tail = FALSE))
pbinom(q = 10, size = 35, prob = 0.51, lower.tail = TRUE)
# 1. La probabilidad de observar exactamente 10 éxitos
# P(X = 10)
(dbinom(x = 10, n = 35, prob = 0.51))
# 1. La probabilidad de observar exactamente 10 éxitos
# P(X = 10)
(dbinom(x = 10, size = 35, prob = 0.51))
pbinom(q = 10, size = 35, prob = 0.51, lower.tail = FALSE)
(dbinom(x = 10, n = 35, prob = 0.51))
(dbinom(x = 10, size = 35, prob = 0.51))
pbinom(q = 10, size = 35, prob = 0.51)
pbinom(q = 9, size = 35, prob = 0.51)
# 3. El cuantil de orden 0.5
# P(X <= b) = 0.5
qbinom(p = 0.5, size = 35, prob = 0.51)
# 4. Genere una muestra aleatoria de tamaño 1000 de esta distribución,
# construya una tabla de frecuencias relativas con los resultados y realice
# el gráfico de barras de los resultados que muestre las frecuencias relativas.
rbinom(n = 1000, size = 35, prob = 0.51)
as.data.frame(prop.table(table(x)))
# 4. Genere una muestra aleatoria de tamaño 1000 de esta distribución,
# construya una tabla de frecuencias relativas con los resultados y realice
# el gráfico de barras de los resultados que muestre las frecuencias relativas.
x = rbinom(n = 1000, size = 35, prob = 0.51)
as.data.frame(prop.table(table(x)))
df.x = as.data.frame(prop.table(table(x)))
ggplot(madf, aes(x = ma, y = Freq))
library(ggplot2)
ggplot(madf, aes(x = ma, y = Freq))
ggplot(x, aes(x = x, y = Frecuencia))
ggplot(x, aes(x = x, y = Frecuencia))
ggplot(x, aes(x = Muestra, y = Frecuencia))
ggplot(df.x, aes(x = Muestra, y = Frecuencia))
ggplot(df.x, aes(x = x, y = Frecuencia))
ggplot(df.x, aes(x = x, y = Freq))
barplot <- ggplot(df.x, aes(x = x, y = Freq)) + geom_bar(stat="identity")
barplot
View(barplot)
# 4. Genere una muestra aleatoria de tamaño 1000 de esta distribución,
# construya una tabla de frecuencias relativas con los resultados y realice
# el gráfico de barras de los resultados que muestre las frecuencias relativas.
x = rbinom(n = 1000, size = 35, prob = 0.51)
df.x = as.data.frame(prop.table(table(x)))
barplot(x, df.x$Freq)
barplot(df.x)
barplot(df.x$Freq)
ggplot(df.x, aes(x = x, y = Freq)) + geom_bar(stat="identity")
barplot(df.x$Freq)
barplot(df.x$Freq, horiz = x)
barplot(df.x$Freq)
# 1. La probabilidad de observar exactamente 10 éxitos
# P(X = 10)
dbinom(x = 10, size = 35, prob = 0.51)
# 2. La probabilidad de observar 10 o más exitos
# P (X >= 10)
pbinom(q = 10, size = 35, prob = 0.51, lower.tail = FALSE)
# 3. El cuantil de orden 0.5
# P(X <= b) = 0.5
qbinom(p = 0.5, size = 35, prob = 0.51)
# 4. Genere una muestra aleatoria de tamaño 1000 de esta distribución,
# construya una tabla de frecuencias relativas con los resultados y realice
# el gráfico de barras de los resultados que muestre las frecuencias relativas.
x = rbinom(n = 1000, size = 35, prob = 0.51)
barplot(prop.table(table(x)))
# 4. Genere una muestra aleatoria de tamaño 1000 de esta distribución,
# construya una tabla de frecuencias relativas con los resultados y realice
# el gráfico de barras de los resultados que muestre las frecuencias relativas.
set.seed(1996)
x = rbinom(n = 1000, size = 35, prob = 0.51)
barplot(prop.table(table(x)))
# 4. Genere una muestra aleatoria de tamaño 1000 de esta distribución,
# construya una tabla de frecuencias relativas con los resultados y realice
# el gráfico de barras de los resultados que muestre las frecuencias relativas.
set.seed(306)
x = rbinom(n = 1000, size = 35, prob = 0.51)
barplot(prop.table(table(x)))
# 4. Genere una muestra aleatoria de tamaño 1000 de esta distribución,
# construya una tabla de frecuencias relativas con los resultados y realice
# el gráfico de barras de los resultados que muestre las frecuencias relativas.
set.seed(34)
x = rbinom(n = 1000, size = 35, prob = 0.51)
barplot(prop.table(table(x)))
# 4. Genere una muestra aleatoria de tamaño 1000 de esta distribución,
# construya una tabla de frecuencias relativas con los resultados y realice
# el gráfico de barras de los resultados que muestre las frecuencias relativas.
set.seed(30)
x = rbinom(n = 1000, size = 35, prob = 0.51)
barplot(prop.table(table(x)))
# 2. La probabilidad de observar 10 o más exitos
# P (X >= 10)
pbinom(q = 9, size = 35, prob = 0.51, lower.tail = FALSE)
# 3. El cuantil de orden 0.5
# P(X = b) = 0.5
qbinom(p = 0.5, size = 35, prob = 0.51)
# 4. Genere una muestra aleatoria de tamaño 1000 de esta distribución,
# construya una tabla de frecuencias relativas con los resultados y realice
# el gráfico de barras de los resultados que muestre las frecuencias relativas.
set.seed(30)
# 2. La probabilidad de observar 10 o más exitos
# P (X >= 10)
pbinom(q = 9, size = 35, prob = 0.51, lower.tail = FALSE)
setwd("~/Documents/DataScience/Bedu/Programacion-con-R-Santander/Sesion-05/Reto-01")
data <- read.csv("datoslineal.csv")
data
attach(data)
x
y
detach(data)
x
plot(x, y, main = "Gráfico de dispersión")
plot(data.x, data.y, main = "Gráfico de dispersión")
plot(data$x, data$y, main = "Gráfico de dispersión")
modelo <- lm(data$y ~ data$x)
summary(modelo)
lines(modelo)
abline(lsfit(data.x, data.y))
abline(lsfit(data$x, data$y))
par(mfrow = c(2, 2))
plot(modelo) # 3.
